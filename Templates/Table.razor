@typeparam T
@using System.Reflection;
@using StockHouse.Helpers;

<h3>@TableName</h3>

<table class="table">
    <thead>
        <tr>
            @foreach (var header in ColumnNames)
            {
                <th>@header</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in Data)
        {
            <tr>
                @foreach (var header in PropertyNames)
                {
                    <td>@(typeof(T).GetProperty(header).GetMethod.Invoke(row, null))</td>
                }

            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public string TableName { get; set; }
    [Parameter]
    public List<T> Data { get; set; }
    [Parameter]
    public T DataType { get; set; }

    private List<string> ColumnNames = new List<string>();
    private List<string> PropertyNames = new List<string>();
    private List<List<object>> ColumnData = new List<List<object>>();

    protected override void OnInitialized()
    {
        PropertyInfo[] fieldinfo = typeof(T).GetProperties();
        Console.WriteLine(fieldinfo.Length.ToString());
        foreach (var field in fieldinfo)
        {
            object[] hTMLAttributes = field.GetCustomAttributes(typeof(DisplayOnTable), false);

            foreach (DisplayOnTable attribute in hTMLAttributes)
            {
                PropertyNames.Add(field.Name);
                if (attribute.UseFieldName)
                {
                    ColumnNames.Add(field.Name);
                }
                else
                {
                    ColumnNames.Add(attribute.DisplayName);
                }
            }
        }

        foreach (var column in ColumnNames)
        {

        }

    }
}
